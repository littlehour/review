一、BFC：
    一个BFC是一个HTML盒子并且至少满足下列条件中的任何一个：
    float的值不为none
    position的值不为static或者relative
    display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个
    overflow的值不为visible

    在BFC中，每个盒子的左外边框紧挨着包含块的左边框（从右到左的格式，则为紧挨右边框）。即使存在浮动也是这样的（尽管一个盒子的边框会由于浮动而收缩），除非
    这个盒子的内部创建了一个新的BFC浮动，盒子本身将会变得更窄）
      1、在常规文档流中，盒子都是从包含块的顶部开始一个接着一个垂直堆放。两个兄弟盒子之间的垂直距离是由他们个体的外边距所决定的，但不是他们的两个外边距之和。
      2、毗邻块盒子的垂直外边距折叠只有他们是在同一BFC时才会发生。如果他们属于不同的BFC，他们之间的外边距将不会折叠。所以通过创建一个新的BFC我们可以防止外边距折叠。
      3、一个BFC可以包含浮动。很多时候我们会碰到这种情况，一个容器里有浮动元素。由于这个原因，容器元素没有高度，它的浮动孩子将会脱离页面的常规流。
        我们通常使用清除浮动来解决这个问题，最受欢迎的方法是使用一个clearfix的伪类元素。但我们同样可以通过定义一个BFC来达到这个目的。（将包含浮动的元素定义为BFC，
        这样，这个容器将包含浮动的子元素，它的高度将扩展到可以包含它的子元素，在这个BFC，这些元素将会回到页面的常规文档流。）
      4、使用BFC可以解决文字环绕问题，即前面元素浮动后，后面元素会出现文字环绕的问题。


二、z-index:
    z-index在relative，absolute和fixed布局中有效。父子元素之间不能通过设置z-index值来进行覆盖，子元素布局始终在父元素上，除非父元素未指定z-index的值
    （static布局的父元素指不指定z-index都无效，因为z-index对static无效），子元素（relative，absolute，fixed布局）指定z-index为-1，才可以让父元素显示在子元素上。
    相邻元素之间的覆盖可以通过指定z-index来决定谁上谁下。


三、负边距问题及外边距折叠问题：
    负边距问题：给未设置宽度的块级元素设置负左边距或负右边距，都会增加元素的宽度。
    外边距折叠问题：外边距在折叠时，通常取相关元素（父子元素以及相邻元素）正边距的最大值，负边距负的较多的（像-2，-3就取-3）。


四、float元素的负边距问题：
    当float元素占满宽时，会把接下来的float元素挤下去。挤下去的元素向下偏移，直到该元素的宽可以被容纳，在向float方向偏移，直到被挡住。
    可以通过给float元素设置负边距，让其不被挤下去，相当于在上面设置了一个他宽度的负边距，让其不被挤下去，让其宽度可以被上一行容纳。


五、行高（line-height）：
    1、行高为上下两行基线的距离
    2、行高与字体大小的差为行间距，差的一半为字体顶端到内容开始地方的距离
    3、行高不可以为负值
    4、table-cell布局（td也是）的元素，当line-height决定的height高于设置的height时，table-cell的高由line-height决定的高决定。而block、inline-block类布局的元素height不受
       line-height决定的高影响，当line-height决定的height高于设置的height时，内容会溢出。
    5、未设置height时，line-height的值决定了元素的高
    6、可继承


六、vertical-align：
    1、用于设置行内元素和td布局的垂直对齐方式，对于块级元素无效
    2、不可继承
    3、父元素的字体大小，行高定了父元素的基线，父元素里面的行内元素在使用垂直对齐的各个属性值时，需要考虑到父元素的字体大小及行高，各属性值的设定可能会影响行框的高度
    baseline:是元素的基线同父元素的基线对齐
    top:将元素的行内框的顶端与行框的顶端对齐
    text-top:将元素行内框的顶端同父元素文本行的顶线对齐
    bottom:将元素的行内框的底端与行框的底端对齐
    text-bottom:将元素行内框的底端同父元素文本行的底线对齐
    middle:将元素放在父元素的中部，通常使用在图片上
    super：使元素的基线相对于父元素的基线升高，升高的幅度由浏览器决定
    sub：使元素的基线相对于父元素的基线降低，降低的幅度由浏览器决定
    长度值和百分比:使元素的基线相对于父元素的基线升高或降低指定值


七、css应用规则：
    1、浏览器声明<用户普通声明<作者普通声明<作者重要声明<用户重要声明
    2、


八、font相关属性：


九、flex布局：
    布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。
    2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。
    浏览器支持：Chrome 21+、Opera 12.1+、firefox 22+、safari 6.1+、IE 10+。
    Flex 是 Flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。
    任何一个容器都可以指定为 Flex 布局：
        .box{
          display: flex;
        }
    行内元素也可以使用 Flex 布局：
        .box{
          display: inline-flex;
        }
    Webkit 内核的浏览器，必须加上-webkit前缀：
        .box{
          display: -webkit-flex; /* Safari */
          display: flex;
        }
    注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。
    采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。
    容器默认存在两根轴：主轴（main axis）和交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫
    做cross end。
    项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。
    容器的属性（以下6个属性设置在容器上）：
        flex-direction：决定主轴的方向（即项目的排列方向）。它可能取4个值：
            row（默认值）：主轴为水平方向，起点在左端。
            row-reverse：主轴为水平方向，起点在右端。
            column：主轴为垂直方向，起点在上沿。
            column-reverse：主轴为垂直方向，起点在下沿。
        flex-wrap：默认情况下，项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。它可能取3个值：
            nowrap（默认）：不换行。
            wrap：换行，第一行在上方。
            wrap-reverse：换行，第一行在下方。
        flex-flow：是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
        justify-content：定义了项目在主轴上的对齐方式。它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右：
            flex-start（默认值）：左对齐。
            flex-end：右对齐。
            center：居中。
            space-between：两端对齐，项目之间的间隔都相等。
            space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
        align-items：定义项目在交叉轴上如何对齐。它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下：
            flex-start：交叉轴的起点对齐。
            flex-end：交叉轴的终点对齐。
            center：交叉轴的中点对齐。
            baseline: 项目的第一行文字的基线对齐。
            stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
        align-content：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。它可能取6个值：
            flex-start：与交叉轴的起点对齐。
            flex-end：与交叉轴的终点对齐。
            center：与交叉轴的中点对齐。
            space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
            space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
            stretch（默认值）：轴线占满整个交叉轴。
        项目的属性（以下6个属性设置在项目上）：
            order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。
            flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性
                      为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
            flex-shrink：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink
                        属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。
            flex-basis：定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width
                       或height属性一样的值（比如350px），则项目将占据固定空间。
            flex：是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属
                 性，而不是单独写三个分离的属性，因为浏览器会推算相关值。
            align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。该属性可能
                       取6个值（auto | flex-start | flex-end | center | baseline | stretch），除了auto，其他都与align-items属性完全一致。