1、Ajax
    全局Ajax事件(1.9版本的jquery全局Ajax事件必须绑定在document元素上。对于跨域的script或跨域的jsonp请求，全局Ajax事件不会触发。如果调用$.ajax()或$.ajaxSetup()时，global选项
    设置为false，则全局Ajax事件不会被触发):
        .ajaxComplete():注册一个事件处理器，无论什么时候Ajax请求完成时触发(不管请求成功或失败)。
            .ajaxComplete(handler)
            handler
            Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions )

        .ajaxError():注册一个事件处理器，无论什么时候当Ajax请求完成发生错误时触发,先于ajaxComplete触发。
            .ajaxError(handler)
            handler
            Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxSettings, String thrownError )
            thrownError:http状态的文本信息。

        .ajaxSend():注册一个事件处理器，无论什么时候Ajax请求被send时触发。
            .ajaxSend( handler )
            handler
            Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions )

        .ajaxStart():注册一个事件处理器，当开始Ajax请求时触发(api 文档中说是第一次开始，不太明白这个意思)。
            .ajaxStart( handler )
            handler
            Type: Function()

        .ajaxStop():注册一个事件处理器，当Ajax请求完成时触发(api 文档中说是所有请求完成时，不太明白这个意思)。
            .ajaxStop( handler )
            handler
            Type: Function()

        .ajaxSuccess():注册一个事件处理器，无论什么时候Ajax请求成功完成时触发。
            .ajaxSuccess( handler )
            handler
            Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions, PlainObject data )

    Ajax底层接口(这些方法可以用来发起任意的Ajax请求)：
        jQuery.ajax()：发起一个异步的http(Ajax)请求。
            jQuery.ajax( url [, settings ] )
            url：向那个URL发起请求。
            settings(PlainObject类型)：一组键值对，用来配置Ajax请求。所有的配置项都是可选的。默认值可以使用$.ajaxSetup()设置。
                accepts(PlainObject类型,默认值取决于dataType)：将dataType映射到它的MIME类型。设置Accept的请求头信息，这个请求头信息用来告诉服务器它接受什么类型的响应内容。可以
                设置为自定义类型，设置为自定义类型时，需要使用converters键值对进行补充说明，从而让自定义类型正确工作。

                async(Boolean类型，默认值为true)：默认所有请求都是使用异步的方式发送的。如果需要使用同步的方式发送请求，就将这个选项设置为false。跨域请求以及dataType设置为'jsonp'
                的请求不支持同步操作。注意，同步操作可能会暂时锁住浏览器，用户其它操作必须等待请求完成才可以执行。从 jQuery 1.8 开始, jqXHR ($.Deferred)中使用async: false 已经过
                时。您必须使用的success/error/complete 的回调选项代替相应的jqXHR对象的方法，比如jqXHR.done()。

                beforeSend( Function( jqXHR jqXHR, PlainObject settings )类型)：请求发送前的回调函数，用来修改请求发送前jqXHR（在jQuery 1.4.x中的，XMLHttpRequest）对象，
                此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递。这是一个Ajax事件 。在beforeSend函数中返回false将取消这个请求。从jQuery 1.5开始，
                beforeSend选项将被访问，不管请求的类型。

                cache(Boolean类型，默认值为true，当dataType设为'script'或'jsonp'时，默认值为false)：如果设置为false时，浏览器将不会缓存请求页面。注意：将cache设置为false，只对
                HEAD和GET请求起作用。它的工作原理是在GET请求参数中附加"_={timestamp}"（译者注：时间戳）。该参数不是其他请求所必须的，除了在IE8中，当一个POST请求一个已经用GET请求过
                的URL。

                complete(Function( jqXHR jqXHR, String textStatus )类型)：当Ajax请求完成时触发(请求success和error之后均触发)。这个回调函数接收两个参数：jqXHR (在 jQuery
                1.4.x中是 XMLHTTPRequest) 对象和一个描述请求状态的字符串("success", "notmodified", "nocontent"，"error", "timeout", "abort", 或者 "parsererror") 。从
                jQuery 1.5开始， complete可以设置有一组回调函数。每个函数将被依次调用。这是一个Ajax事件。

                contents(PlainObject类型)：一个以"{字符串/正则表达式}"配对的对象，根据给定的内容类型，解析请求的返回结果。 (1.5新增)

                contentType(Boolean或String类型，默认值为'application/x-www-form-urlencoded; charset=UTF-8')：当将数据发送到服务器时，使用该内容类型。默认值是
                "application/x-www-form-urlencoded; charset=UTF-8"，适合大多数情况。如果你明确地传递了一个内容类型（Content-Type）给 $.ajax()，那么他总是会发送给服务器（即
                使没有数据要发送）。从 jQuery 1.6 开始，你可以传递false来告诉jQuery，没有设置任何内容类型头信息。 注意：W3C的XMLHttpRequest的规范规定，数据将总是使用UTF-8字符集
                传递给服务器；指定其他字符集无法强制浏览器更改编码。 注意:对于跨域请求，内容类型设置为application/x-www-form-urlencoded, multipart/form-data, 或 text/plain以
                外， 将触发浏览器发送一个预检OPTIONS请求到服务器。"application/x-www-form-urlencoded; charset=UTF-8"的请求体是form data；其他的类型，请求体都为Request Payload。

                context(PlainObject类型)：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象（$.ajaxSettings与传递给$.ajax的设置合
                并）。比如指定一个DOM元素作为context参数，这样就设置了complete回调函数的上下文为这个DOM元素。

                converters(PlainObject类型，默认：{"* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML})：一个数
                据类型到数据类型转换器的对象。每个转换器的值是一个函数，返回经转换后的请求结果。 ( 1.5新增)

                crossDomain(Boolean类型，默认: 同域请求为false， 跨域请求为true)：如果你想在同一域中强制跨域请求（如JSONP形式），例如，想服务器端重定向到另一个域，那么需要将
                crossDomain设置为 true 。 ( 1.5 新增)

                data(PlainObject类型或String类型或Array类型)：发送到服务器的数据。它被转换成一个查询字符串,如果已经是一个字符串的话就不会转换。查询字符串将被追加到GET请求的URL后面。
                参见 processData 选项说明，以防止这种自动转换。对象必须为"{键:值}"格式。如果这个参数是一个数组，jQuery会按照traditional 参数的值， 将自动转化为一个同名的多值查询字符
                串(查看下面的说明)。愚人码头注：如 {foo:["bar1", "bar2"]} 转换为 '&foo=bar1&foo=bar2'。

                dataFilter(Function( String data, String type ) => Anything类型)：一个函数被用来处理XMLHttpRequest的原始响应数据。这是一个预过滤功能，净化响应。您应该返回净化
                后的数据(这个数据可以在success事件回调中，通过data参数使用)。提供data和type两个参数：data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。

                dataType(String类型，默认值根据响应内容可以是：xml, json, script, 或html)：你期待从服务器返回数据的类型。 如果没有指定，jQuery将尝试通过响应信息的MIME类型来智能判
                断（一个XML MIME类型就被识别为XML，在1.4中 JSON将生成一个JavaScript对象，在1.4中 script 将执行该脚本，其他任何类型会返回一个字符串）。 可用的类型（作为第一个参数传递
                给success回调函数的结果）有：
                    'xml'：返回xml文档，可以通过jquery处理。
                    'html'：返回纯文本HTML文本；包含的script标签会在插入DOM时执行。
                    'script'：把响应的结果当作JavaScript执行，并将其当作纯文本返回。默认情况下会通过在URL中附加查询字符串变量 ，_=[TIMESTAMP]， 禁用缓存结果，除非设置了cache参数
                    为true。注意: 在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。
                    'json'：把响应的结果当作JSON执行，并返回一个JavaScript对象。跨域"json" 请求转换为"jsonp"，除非该请求在其请求选项中设置了jsonp:false。JSON 数据以严格的方式解
                    析; 任何畸形的JSON将被拒绝，并且抛出解析错误信息。在jQuery1.9中，一个空响应也将被拒绝;服务器应该返回null或{}响应代替。（见json.org的更多信息，正确的JSON格式。）
                    'jsonp'： 以 JSONP 的方式载入 JSON 数据块。会自动在所请求的URL最后添加"?callback=?"。默认情况下会通过在URL中附加查询字符串变量 ，_=[TIMESTAMP]， 禁用缓存结
                    果，除非设置了cache参数为true。
                    'text'：返回纯文本字符串。
                多个用空格分割的值:从jQuery 1.5开始， jQuery可以将接收到的Content-Type头部的数据类型转换成你需要的数据类型。例如，如果你想要一个文本响应为XML处理，使用"text xml"作
                为dataType的值。您也可以将一个JSONP的请求，以文本形式接收，并用jQuery以XML解析: "jsonp text xml"。同样地可以使用"jsonp xml"简写,首先会尝试从jsonp到xml的转换，如
                果转换失败，就先将 jsonp 转换成 text, 然后再由 text 转换成 xml。

                error(Function( jqXHR jqXHR, String textStatus, String errorThrown )类型)：请求失败时，调用此函数。这个函数接收3个参数：jqXHR (在 jQuery 1.4.x前为
                XMLHttpRequest) 对象、描述发生错误类型的一个字符串 和 捕获的异常对象。第二个参数可能的值除了null以外，有："timeout", "error", "abort", 和"parsererror"。当发生
                http错误时，errorThrown 接收HTTP状态的文本部分，比如： "Not Found"（没有找到） 或者 "Internal Server Error."（服务器内部错误）。 从jQuery 1.5开始, error可以设
                置为一个函数数组。每个函数将被依次调用。注意：此处理程序在跨域脚本和JSONP形式的请求时不被调用。这是一个Ajax Event。

                global(Boolean类型，默认为true)：设置请求是否触发全局Ajax事件。默认值为true。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或者 ajaxStop。这可以用来控制各
                种Ajax事件。

                headers(PlainObject类型，默认为{})：随着请求一起发送的额外的请求头键值对对象。X-Requested-With: XMLHttpRequest总是会被加在请求头，但这个请求头的默认值(XMLHttpRequest)
                ，可以在这修改。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖 。 (1.5 新增 ）

                ifModified(Boolean类型，默认值为false)：只有上次请求响应改变时，才允许请求成功。使用HTTP包Last-Modified 头信息判断。默认值是false，忽略HTTP头信息。在jQuery 1.4
                中，他也会检查服务器指定的'etag'来确定数据没有被修改过。

                isLocal(Boolean类型，默认值取决于当前的位置协议)：允许当前环境被认定为“本地”，（如文件系统），即使jQuery默认情况下不会这么做。以下协议目前公认为本地：file,
                *-extension, and widget。如果isLocal设置需要修改，建议在$.ajaxSetup()方法中这样做一次。 (1.5 新增 ）

                jsonp(String或Boolean类型)：重写jsonp请求中回调函数的名字。这个值用来替代在"callback=?"这种GET或POST请求中URL参数里的"callback"部分，比如{jsonp:'onJsonPLoad'}
                会导致将"onJsonPLoad=?"传给服务器。在jQuery 1.5，，设置jsonp选项为false，可以阻止jQuery将"?callback"字符串加在URL后或试图使用"=?"转换。在这种情况下，你也应该明
                确设置jsonpCallback。例如, { jsonp: false, jsonpCallback: "callbackName" }。如果你不信任你的Ajax请求的目标，出于安全原因，考虑设置jsonp 属性为false。

                jsonpCallback(String或Function()类型)：为jsonp请求指定一个回调函数名。这个值将用来取代jQuery自动生成的随机函数名。这主要用来让jQuery生成一个独特的函数名，这样管理
                请求更容易，也能方便地提供回调函数和错误处理。你也可以在想让浏览器缓存GET请求的时候，指定这个回调函数名。从jQuery 1.5开始，你也可以使用一个函数作为该参数设置，在这种情
                况下，该函数的返回值就是jsonpCallback的结果。

                method(String类型，默认值为GET)：HTTP请求方法(比如："POST", "GET ", "PUT")。(添加版本: 1.9.0)。（愚人码头注：如果你使用jQuery 1.9.0之前的版本，你需要使用type选项。）

                mimeType(String类型)：一个mime类型用来覆盖XHR的MIME类型。 (1.5 新增 ）

                password(String类型)：用于响应HTTP访问认证请求的密码。

                processData(Boolean类型，默认值为true)：默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认的
                contentType值("application/x-www-form-urlencoded")。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。

                scriptCharset(String类型)：仅适用于当"script"传输使用时（例如，跨域的"jsonp"或 dataType选项为"script" 和 "GET"类型）。请求中使用在script标签上设置charset属性。
                通常只在本地和远程的内容编码不同时使用。

                statusCode(PlainObject类型，默认为{})：一个HTTP响应状态码和当请求响应相应的状态码时执行的函数组成的对象。如果请求成功，响应状态代码对应的函数会带着success回调函数相
                同的参数；如果请求结果是错误的（包含3xx之类的重定向），他们会采用error回调函数相同的参数。(1.5 新增)

                success(Function( Anything data, String textStatus, jqXHR jqXHR )类型)：请求成功后的回调函数。这个函数传递3个参数：从服务器返回的数据，并根据dataType参数或
                dataFilter回调函数进行处理后的数据，如果指定的话；一个描述状态的字符串;还有jqXHR（在jQuery 1.4.x前为XMLHttpRequest）对象。在jQuery 1.5，success可以接受一个函数
                数组。每个函数将被依次调用。这是一个Ajax事件。

                timeout(Number类型)：设置请求超时时间（毫秒）。值为0表示没有超时。此设置将覆盖$.ajaxSetup() 里的全局设置。超时周期开始于$.ajax被调用；如果几个其他请求都在进行并且
                浏览器没有可用的连接，它有可能在被发送前就超时了。在 jQuery 1.4.x 和前面的版本中, 如果请求超时，XMLHttpRequest对象是处于无效状态;访问任何对象的成员可能会抛出一个异
                常。只有在Firefox 3.0+,script 和 JSONP请求在超时后不能被取消;该脚本将运行即使超时后到达。

                traditional(Boolean类型)：如果你想要用传统的方式来序列化数据，那么就设置为true。请参考工具分类下面的jQuery.param 方法。

                type(String类型，默认为GET)：method选项的别名。如果你使用jQuery 1.9.0 之前的版本，你需要使用type选项。

                url(String类型，默认为当前页面)：发送请求的地址。

                username(String类型)：用于响应HTTP访问认证请求的用户名。

                xhr(Function()类型，默认为当可用的ActiveXObject（IE）中，否则为XMLHttpRequest)：回调创建XMLHttpRequest对象。当可用时默认为ActiveXObject（IE）中，否则为
                XMLHttpRequest。重写，提供你自己实现的XMLHttpRequest或改进XMLHttpRequest对象。

                xhrFields(PlainObject类型)：一对“文件名-文件值”组成的映射，用于设定原生的 XHR对象。例如，如果需要的话，在进行跨域请求时，你可以用它来设置withCredentials为true。
                在 jQuery 1.5中， withCredentials属性不会传递给原生的XHR从而对于需要使用此属性的 CORS 请求，则只能忽略这个属性。。出于这个原因，我们建议您使用jQuery1.5.1+，如果
                您需要使用它。(1.5.1新增)

